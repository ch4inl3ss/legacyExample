/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 21 13:44:59 GMT 2019
 */

package de.ch4inl3ss.aktivitaet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.ch4inl3ss.aktivitaet.Aktivitaet;
import de.ch4inl3ss.model.DataContainer;
import de.ch4inl3ss.repository.ProgrammerRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Aktivitaet_ESTest extends Aktivitaet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setInputComplex("complex");
      String string0 = aktivitaet0.ausfuehrenImplementierung("complex", dataContainer0, (-1621177725));
      assertEquals("complex", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setApiKey("Customer [id=");
      // Undeclared exception!
      try { 
        aktivitaet0.ausfuehrenImplementierung("remote", dataContainer0, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.ch4inl3ss.aktivitaet.Aktivitaet", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setInputComplex("complex");
      // Undeclared exception!
      aktivitaet0.ausfuehrenImplementierung("complex", dataContainer0, 1778);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setInputComplex("error");
      String string0 = aktivitaet0.ausfuehrenImplementierung("complex", dataContainer0, 1);
      assertEquals("complex", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      String string0 = aktivitaet0.ausfuehrenImplementierung("complex", dataContainer0, 1);
      assertEquals("complex", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      String string0 = aktivitaet0.ausfuehrenImplementierung("ooS0HJ4D+p", dataContainer0, 0);
      assertEquals("error", string0);
  }
}
