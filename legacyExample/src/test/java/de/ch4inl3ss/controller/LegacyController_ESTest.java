/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 21 13:34:55 GMT 2019
 */

package de.ch4inl3ss.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.ch4inl3ss.aktivitaet.Aktivitaet;
import de.ch4inl3ss.controller.LegacyController;
import de.ch4inl3ss.entity.Programmer;
import de.ch4inl3ss.model.DataContainer;
import de.ch4inl3ss.repository.ProgrammerRepository;
import java.util.LinkedHashSet;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegacyController_ESTest extends LegacyController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = legacyController0.remote(extendedModelMap0);
      assertEquals("remote", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      LinkedHashSet<Programmer> linkedHashSet0 = new LinkedHashSet<Programmer>();
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(programmerRepository1).findAll();
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = legacyController0.database(extendedModelMap0);
      assertEquals("database", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = legacyController0.complex(extendedModelMap0);
      assertEquals("complex", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://api.forecast.io/forecast//null,null?units=si&lang=null&exclude=hourly,minutely");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "3+");
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      dataContainer0.setApiKey("");
      // Undeclared exception!
      try { 
        legacyController0.remoteReturn(dataContainer0, extendedModelMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      // Undeclared exception!
      try { 
        legacyController0.complexReturn((DataContainer) null, extendedModelMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.ch4inl3ss.controller.LegacyController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      DataContainer dataContainer0 = new DataContainer();
      // Undeclared exception!
      try { 
        legacyController0.complexReturn(dataContainer0, extendedModelMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      Stack<String> stack0 = new Stack<String>();
      dataContainer0.setOutputComplex(stack0);
      // Undeclared exception!
      try { 
        legacyController0.complexReturn(dataContainer0, extendedModelMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      DataContainer dataContainer0 = new DataContainer();
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      // Undeclared exception!
      try { 
        legacyController0.remoteReturn(dataContainer0, extendedModelMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.dvdme.ForecastIOLib.ForecastIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      String string0 = legacyController0.index();
      assertEquals("index", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      // Undeclared exception!
      try { 
        legacyController0.complex((Model) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.ch4inl3ss.controller.LegacyController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      // Undeclared exception!
      try { 
        legacyController0.remote((Model) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.ch4inl3ss.controller.LegacyController", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegacyController legacyController0 = new LegacyController();
      Aktivitaet aktivitaet0 = new Aktivitaet();
      ProgrammerRepository programmerRepository0 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(aktivitaet0, (Class<?>) Aktivitaet.class, "programmerRepository", (Object) programmerRepository0);
      Injector.validateBean(aktivitaet0, (Class<?>) Aktivitaet.class);
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "aktivitaet", (Object) aktivitaet0);
      ProgrammerRepository programmerRepository1 = mock(ProgrammerRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(programmerRepository1).findAll();
      Injector.inject(legacyController0, (Class<?>) LegacyController.class, "programmerRepository", (Object) programmerRepository1);
      Injector.validateBean(legacyController0, (Class<?>) LegacyController.class);
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      // Undeclared exception!
      try { 
        legacyController0.database(extendedModelMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.ch4inl3ss.controller.LegacyController", e);
      }
  }
}
