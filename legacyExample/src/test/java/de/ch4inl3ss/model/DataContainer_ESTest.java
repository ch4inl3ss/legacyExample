/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 21 13:42:01 GMT 2019
 */

package de.ch4inl3ss.model;

import org.junit.Test;
import static org.junit.Assert.*;
import de.ch4inl3ss.entity.Programmer;
import de.ch4inl3ss.model.DataContainer;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataContainer_ESTest extends DataContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setWindspeed("{GTW");
      String string0 = dataContainer0.getWindspeed();
      assertEquals("{GTW", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setTemperature("");
      String string0 = dataContainer0.getTemperature();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      LinkedList<Programmer> linkedList0 = new LinkedList<Programmer>();
      dataContainer0.setProgrammers(linkedList0);
      List<Programmer> list0 = dataContainer0.getProgrammers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      LinkedList<Programmer> linkedList0 = new LinkedList<Programmer>();
      Programmer programmer0 = new Programmer(", firstName=", "c\u0003l?:1.wBrWV6 lo-", 2364);
      linkedList0.add(programmer0);
      dataContainer0.setProgrammers(linkedList0);
      List<Programmer> list0 = dataContainer0.getProgrammers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      Programmer programmer0 = new Programmer();
      dataContainer0.setProgrammer(programmer0);
      Programmer programmer1 = dataContainer0.getProgrammer();
      assertNull(programmer1.getLastName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      Programmer programmer0 = new Programmer("", "L&;e", 356);
      dataContainer0.setProgrammer(programmer0);
      Programmer programmer1 = dataContainer0.getProgrammer();
      assertEquals("L&;e", programmer1.getLastName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      dataContainer0.setOutputComplex(linkedList0);
      List<String> list0 = dataContainer0.getOutputComplex();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setLongitude("+3bwp3NBy6=vE\"V");
      String string0 = dataContainer0.getLongitude();
      assertEquals("+3bwp3NBy6=vE\"V", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setLongitude("");
      String string0 = dataContainer0.getLongitude();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setLatitude("/w2_(F=$(%=2H35_");
      String string0 = dataContainer0.getLatitude();
      assertEquals("/w2_(F=$(%=2H35_", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setLatitude("");
      String string0 = dataContainer0.getLatitude();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setInputComplex("3B56S_fXyML8&F10");
      String string0 = dataContainer0.getInputComplex();
      assertEquals("3B56S_fXyML8&F10", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setInputComplex("");
      String string0 = dataContainer0.getInputComplex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setHumidity("aCF|g");
      String string0 = dataContainer0.getHumidity();
      assertEquals("aCF|g", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setApiKey(" (j+Fr6!H[F(dU]wH2K");
      String string0 = dataContainer0.getApiKey();
      assertEquals(" (j+Fr6!H[F(dU]wH2K", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setApiKey("");
      String string0 = dataContainer0.getApiKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      String string0 = dataContainer0.getTemperature();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      List<Programmer> list0 = dataContainer0.getProgrammers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      String string0 = dataContainer0.getLatitude();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setTemperature("+");
      String string0 = dataContainer0.getTemperature();
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      List<String> list0 = dataContainer0.getOutputComplex();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      String string0 = dataContainer0.getLongitude();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      String string0 = dataContainer0.getInputComplex();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      String string0 = dataContainer0.getHumidity();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setWindspeed("");
      String string0 = dataContainer0.getWindspeed();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      dataContainer0.setHumidity("");
      String string0 = dataContainer0.getHumidity();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      String string0 = dataContainer0.getWindspeed();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      Programmer programmer0 = new Programmer("", (String) null, (-651));
      dataContainer0.setProgrammer(programmer0);
      Programmer programmer1 = dataContainer0.getProgrammer();
      assertNull(programmer1.getId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      String string0 = dataContainer0.getApiKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      Programmer programmer0 = dataContainer0.getProgrammer();
      assertNull(programmer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataContainer dataContainer0 = new DataContainer();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      dataContainer0.setOutputComplex(linkedList0);
      List<String> list0 = dataContainer0.getOutputComplex();
      assertEquals(0, list0.size());
  }
}
